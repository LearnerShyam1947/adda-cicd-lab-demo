pipeline {
    agent any

    tools {
        maven 'maven-3.8.7'
        jdk 'java-21'
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'KarnamShyam1947_DockerHub_Credentials' 
        DOCKER_IMAGE_NAME = 'karnamshyam1947/adda-lab-cicd-demo' 
    }



    stages {

        stage ("clean workspace") {
            steps {
                cleanWs()
            }
        }

        stage('GitHub Checkout') {
            steps {
                git branch: 'clean', credentialsId: 'LearnerShyam1947_GitHub_credentials', url: 'https://github.com/LearnerShyam1947/adda-cicd-lab-demo.git'
            }
        }

        stage('Maven Check') {
            steps {
                sh 'mvn --version' 
            }
        }
        
        stage('Java Check') {
            steps {
                sh 'java --version' 
            }
        }
         
        stage('Docker Check') {
            steps {
                sh 'docker --version' 
            }
        }
        
        stage('Trivy Check') {
            steps {
                sh 'trivy --version' 
            }
        }
        
        
        // stage('Build Spring Boot Project') {
        //     steps {
        //         sh "mvn -Dmaven.test.failure.ignore=true -DskipTests clean package"
        //     }
        // }
        
        stage('Dependency Check') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'dp-check-12.0.2'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQubeServer') {
                    sh "mvn clean verify sonar:sonar -Dsonar.projectKey=adda-cicd"
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') { 
                        def qg = waitForQualityGate() 
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else {
                            echo 'Quality Gate Passed'
                        }
                    }
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                script {
                    
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:latest ."
                }
            }
        }

        stage('trivy docker image scan') {
            steps {
                sh "trivy image --format table -o trivy_report.html --severity HIGH,CRITICAL ${DOCKER_IMAGE_NAME}:latest"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    
                    withCredentials([
                        usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", 
                        passwordVariable: 'DOCKER_PASSWORD', 
                        usernameVariable: 'DOCKER_USERNAME')
                    ]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                    }

                    
                    sh "docker push ${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }

        
    }

    post {
        success {
            echo 'Build was successful!'
        }
        failure {
            echo 'Build failed'
        }
    }
}